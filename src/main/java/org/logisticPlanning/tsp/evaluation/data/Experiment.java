package org.logisticPlanning.tsp.evaluation.data;

import org.logisticPlanning.tsp.benchmarking.instances.Instance;
import org.logisticPlanning.utils.text.TextUtils;

/**
 * <p>
 * An experiment is a set of run sets that all are generated by a given
 * algorithm configuration.
 * </p>
 */
public class Experiment extends _OwnedSet<RunSet, ExperimentSet> {
  /** the serial version uid */
  private static final long serialVersionUID = 1L;

  /**
   * the experiment setup
   *
   * @serial the object holding the setup of this experiment
   */
  private final ExperimentSetup m_setup;

  /**
   * the long name
   *
   * @serial the long, full name of this experiment
   */
  private final String m_longName;

  /**
   * the short name
   *
   * @serial the short name of this experiment
   */
  private final String m_shortName;

  /**
   * instantiate
   *
   * @param name
   *          the experiment name
   * @param setup
   *          the experiment setup
   * @param data
   *          the data of the run set
   */
  public Experiment(final String name, final ExperimentSetup setup,
      final RunSet[] data) {
    super(name, data);

    String s;

    this.m_setup = setup;
    this.m_shortName = TextUtils.prepare(name);

    setLongName: {
      if (setup != null) {
        s = setup.getSetupName();
        if (s != null) {
          this.m_longName = s;
          break setLongName;
        }
      }
      this.m_longName = this.m_shortName;
    }

    DataSet._setup(data, this);
  }

  /**
   * Get the experiment setup
   *
   * @return the experiment setup
   */
  public final ExperimentSetup getSetup() {
    return this.m_setup;
  }

  /**
   * Get the short name of the experiment/algorithm
   *
   * @return the short name of the experiment/algorithm
   */
  public final String shortName() {
    return this.m_shortName;
  }

  /**
   * Get the long name of the experiment/algorithm
   *
   * @return the long name of the experiment/algorithm
   */
  public final String longName() {
    return this.m_longName;
  }

  /**
   * Get the run set for the given instance
   *
   * @param inst
   *          the instance
   * @return the run set belonging to that instance, or {@code null} if no
   *         such set exists
   */
  public final RunSet forInstance(final Instance inst) {
    final RunSet[] ps;
    RunSet midVal;
    int low, high, mid, cmp;

    ps = this.m_data;
    low = 0;
    high = (ps.length - 1);

    while (low <= high) {
      mid = ((low + high) >>> 1);
      midVal = ps[mid];
      cmp = midVal.m_inst.compareTo(inst);

      if (cmp < 0) {
        low = (mid + 1);
      } else
        if (cmp > 0) {
          high = (mid - 1);
        } else {
          return midVal;
        }
    }

    return null;
  }

}
