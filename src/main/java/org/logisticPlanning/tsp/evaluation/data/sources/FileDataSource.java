package org.logisticPlanning.tsp.evaluation.data.sources;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.logisticPlanning.tsp.benchmarking.instances.Instance;
import org.logisticPlanning.tsp.benchmarking.objective.DataPoint;
import org.logisticPlanning.tsp.benchmarking.objective.ObjectiveFunction;
import org.logisticPlanning.tsp.evaluation.data.DataSource;
import org.logisticPlanning.tsp.evaluation.data.Experiment;
import org.logisticPlanning.tsp.evaluation.data.ExperimentSet;
import org.logisticPlanning.tsp.evaluation.data.ExperimentSetup;
import org.logisticPlanning.tsp.evaluation.data.Run;
import org.logisticPlanning.tsp.evaluation.data.RunSet;
import org.logisticPlanning.tsp.evaluation.data.SetupItem;
import org.logisticPlanning.utils.config.Configurable;
import org.logisticPlanning.utils.config.Configuration;
import org.logisticPlanning.utils.config.ListParser;
import org.logisticPlanning.utils.io.FileUtils;
import org.logisticPlanning.utils.text.TextUtils;

/**
 * A data source loading the data from a set of directories. This is the
 * most basic way to obtain experimental data, as it can parse directly the
 * data that has been generated by the
 * {@link org.logisticPlanning.tsp.benchmarking.objective.ObjectiveFunction
 * objective function} that logs an algorithms progress in memory and
 * flushes it to log files once a run has completed.
 */
public class FileDataSource extends DataSource {
  /** the serial version uid */
  private static final long serialVersionUID = 1L;

  /** the file/folder list: {@value} */
  public static final String PARAM_SOURCE = "source"; //$NON-NLS-1$

  /** the file/folder list */
  private List<File> m_list;

  /** Instantiate the data source */
  public FileDataSource() {
    super("FileDataSource"); //$NON-NLS-1$
    this.m_list = null;
  }

  /** {@inheritDoc} */
  @Override
  protected ExperimentSet doLoadData() throws IOException {
    final List<File> list;
    final List<Experiment> experiments;
    final List<RunSet> runSets;
    final List<Run> runs;
    final List<DataPoint> dataPoints;
    final int size;
    final StringBuilder name;
    boolean found;

    list = this.m_list;
    if (list != null) {

      experiments = new ArrayList<>();
      runSets = new ArrayList<>();
      runs = new ArrayList<>();
      dataPoints = new ArrayList<>();

      name = new StringBuilder();
      found = false;
      for (final File file : list) {
        if (this.__load_experiments(file, experiments, runSets, runs,
            dataPoints)) {
          if (found) {
            name.append('+');
          }
          found = true;
          name.append(file.getName());
        }
      }

      if (found) {
        size = experiments.size();
        if (size > 0) {
          try {
            return new ExperimentSet(name.toString(),//
                experiments.toArray(new Experiment[size]));
          } catch (final IllegalArgumentException | NullPointerException
              | IllegalStateException error) {
            throw new IOException(
                ("Error encountered when creating ExperimentSet with data loaded from folder list "//$NON-NLS-1$
                    + list + '\''), error);
          }
        }
      }
    }

    return null;
  }

  /** {@inheritDoc} */
  @Override
  public void configure(final Configuration config) {
    super.configure(config);

    this.m_list = config.get(FileDataSource.PARAM_SOURCE,
        ListParser.FILE_LIST_PARSER, this.m_list);
  }

  /** {@inheritDoc} */
  @Override
  public void printConfiguration(final PrintStream ps) {
    super.printConfiguration(ps);
    Configurable.printKey(FileDataSource.PARAM_SOURCE, ps);
    Configurable.printlnObject(this.m_list, ps);
  }

  /** {@inheritDoc} */
  @Override
  public void printParameters(final PrintStream ps) {
    super.printParameters(ps);
    Configurable.printKey(FileDataSource.PARAM_SOURCE, ps);
    ps.println("The list of source files/folders."); //$NON-NLS-1$
  }

  /**
   * Load a run from a file. The name of the run will be the name of the
   * file.
   *
   * @param f
   *          the file
   * @param temp
   *          a temporary storage
   * @return the loaded run, or {@code null} if none was created
   * @throws IOException
   *           the the loading fails
   */
  private final Run __load_run(final File f, final List<DataPoint> temp)
      throws IOException {
    final Logger log;
    final File v;
    String name, s;
    Run res;
    int size;

    v = FileUtils.canonicalize(f);
    if (v == null) {
      return null;
    }
    if (!(v.exists())) {
      return null;
    }
    if (!(v.isFile())) {
      return null;
    }

    name = TextUtils.prepare(v.getName());
    if (name == null) {
      return null;
    }
    size = name.lastIndexOf('.');
    if (size >= 0) {
      name = TextUtils.prepare(name.substring(0, size));
      if (name == null) {
        return null;
      }
    }

    log = this.getLogger();
    if ((log != null) && (log.isLoggable(Level.FINER))) {
      log.finer("Begin loading file '" + v + '\''); //$NON-NLS-1$
    }
    res = null;
    try {

      temp.clear();
      try {

        try (Reader r = new FileReader(v)) {

          try (BufferedReader br = new BufferedReader(r)) {
            int l;
            DataPoint p;

            while ((s = br.readLine()) != null) {
              s = FileDataSource.__prepare(s);
              if (s == null) {
                continue;
              }

              l = s.length();
              if (l <= 0) {
                continue;
              }

              if (ObjectiveFunction.LOG_DATA_SECTION.equalsIgnoreCase(s)) {
                while ((p = FileDataSource.__load_point(br)) != null) {
                  temp.add(p);
                }
              }
            }
          }
        }

        size = temp.size();
        if (size > 0) {
          try {
            res = new Run(name, temp.toArray(new DataPoint[size]));
          } catch (final IllegalArgumentException | NullPointerException
              | IllegalStateException error) {
            throw new IOException(
                ("Error encountered when creating Run with data loaded from file '"//$NON-NLS-1$
                    + v + '\''), error);
          }
        }
      } finally {
        temp.clear();
      }

    } finally {
      if ((log != null) && (log.isLoggable(Level.FINER))) {
        s = ("Finished loading file '" + v); //$NON-NLS-1$
        if (res != null) {
          s += ("': got a new run with " + res.size() + //$NON-NLS-1$
          " points."); //$NON-NLS-1$
        } else {
          s += ("', but it did not contain any log points."); //$NON-NLS-1$
        }
        log.finer(s);
      }
    }

    return res;
  }

  /**
   * Load a run set from a given folder. This folder is supposed to contain
   * the results of one set of run and one experiment.
   *
   * @param folder
   *          the folder name
   * @param tempRuns
   *          a temporary variable for runs
   * @param tempDataPoints
   *          a temporary variable for data points
   * @param inst
   *          the instance
   * @return the experiment set, or {@code null} if no data was found
   * @throws IOException
   *           the io exception, if IO fails
   */
  private final RunSet __load_run_set(final Instance inst,
      final File folder, final List<Run> tempRuns,
      final List<DataPoint> tempDataPoints) throws IOException {
    final Logger logger;
    RunSet res;
    File[] files;
    File v;
    Run run;
    int s;

    if (inst == null) {
      return null;
    }

    v = FileUtils.canonicalize(folder);
    if (v == null) {
      return null;
    }

    logger = this.getLogger();
    if ((logger != null) && (logger.isLoggable(Level.FINE))) {
      logger.fine("Begining run set from '" + v + //$NON-NLS-1$
          "' for instance '" + inst.name() + '\''); //$NON-NLS-1$
    }
    res = null;
    try {

      if (!(v.exists())) {
        return null;
      }
      if (!(v.isDirectory())) {
        return null;
      }

      files = v.listFiles();
      if (files == null) {
        return null;
      }

      tempRuns.clear();
      tempDataPoints.clear();
      try {
        for (final File f : files) {
          run = this.__load_run(f, tempDataPoints);
          if (run != null) {
            tempRuns.add(run);
          }
        }
        s = tempRuns.size();
        if (s > 0) {
          try {
            res = new RunSet(inst, tempRuns.toArray(new Run[s]));
          } catch (final IllegalArgumentException | NullPointerException
              | IllegalStateException error) {
            throw new IOException(
                ("Error encountered when creating RunSet with data loaded from folder '" + v + //$NON-NLS-1$
                    "' for instance '" + inst.name() + '\''),//$NON-NLS-1$
                error);
          }
        }

      } finally {
        tempRuns.clear();
        tempDataPoints.clear();
      }
    } finally {
      if ((logger != null) && (logger.isLoggable(Level.FINE))) {
        logger.fine("Finished loading run set from '" + v + //$NON-NLS-1$
            "' for instance '" + inst.name() + //$NON-NLS-1$
            ((res != null) ? ("' discovered " + res.size() + //$NON-NLS-1$
            " runs.")//$NON-NLS-1$
                : "', but found no runs.")); //$NON-NLS-1$
      }
    }

    return res;
  }

  /**
   * try to find the experiment setup
   *
   * @param rootDir
   *          the root directory
   * @return the setup, or null
   */
  private final ExperimentSetup __find_setup(final File rootDir) {
    Logger log;
    File[] fs;
    String s;
    ExperimentSetup es;

    if (rootDir == null) {
      return null;
    }

    fs = rootDir.listFiles();
    if (fs == null) {
      return null;
    }
    log = null;

    for (final File f : fs) {
      if (!(f.exists())) {
        continue;
      }
      if (f.isDirectory()) {
        es = this.__find_setup(f);
        if (es != null) {
          return es;
        }
      }

      if (!(f.isFile())) {
        continue;
      }

      s = f.getName();
      if (s == null) {
        continue;
      }
      if (s.toLowerCase().endsWith(".txt")) { //$NON-NLS-1$
        try {
          es = FileDataSource.__load_setup(f);
          if (es != null) {
            return es;
          }
        } catch (final Throwable t) {

          if (log == null) {
            log = this.getLogger();
          }

          if ((log != null) && (log.isLoggable(Level.WARNING))) {
            log.log(Level.WARNING,//
                ("Error loading experiment setup from file '"//$NON-NLS-1$
                    + f + '\''), t);
          }
        }
      }
    }

    return null;
  }

  /**
   * Load an experiment setup from a buffered reader
   *
   * @param br
   *          the reader
   * @return the experiment setup, or {@code null} if no data was
   *         discovered
   * @throws IOException
   *           if io fails
   */
  private static final ExperimentSetup __load_setup(final BufferedReader br)
      throws IOException {
    String algoName, initName, s, a, b;
    ArrayList<SetupItem> cur, algo, init, sys, create;
    int i, z, l;

    algoName = initName = null;
    create = cur = algo = init = sys = null;

    outer: while ((s = br.readLine()) != null) {
      s = FileDataSource.__prepare(s);
      if (s == null) {
        continue outer;
      }

      l = s.length();
      setAB: {
        for (i = 0; i < l; i++) {
          if (s.charAt(i) == ':') {
            a = FileDataSource.__prepare(s.substring(0, i));
            if (a == null) {
              continue outer;
            }
            b = FileDataSource.__prepare(s.substring(i + 1));
            break setAB;
          }
        }
        a = s;
        b = null;
      }

      if (ObjectiveFunction.SECTION_END.equalsIgnoreCase(a)) {
        cur = null;
        if ((algo != null) && (sys != null) && (init != null)
            && (algoName != null)) {
          break outer;
        }
        continue outer;
      }

      if (ObjectiveFunction.ALGORITHM_DATA_SECTION.equalsIgnoreCase(a)) {
        cur = algo = new ArrayList<>();
        continue outer;
      }

      if (ObjectiveFunction.DETERMINISTIC_INITIALIZATION_SECTION
          .equalsIgnoreCase(a)) {
        cur = init = new ArrayList<>();
        continue outer;
      }

      if (ObjectiveFunction.SYSTEM_DATA_SECTION.equalsIgnoreCase(a)) {
        cur = sys = new ArrayList<>();
        continue outer;
      }

      if (ObjectiveFunction.CREATOR_INFORMATION_SECTION
          .equalsIgnoreCase(a)) {
        cur = create = new ArrayList<>();
        continue outer;
      }

      if ((cur == algo) && (cur != null)
          && ObjectiveFunction.ALGORITHM_NAME.equalsIgnoreCase(a)) {
        algoName = b;
      }

      if ((cur == init) && (cur != null)
          && ObjectiveFunction.INITIALIZER_NAME.equalsIgnoreCase(a)) {
        initName = b;
      }

      if ((cur != null) && (b != null)) {
        z = cur.size();
        if (z > 0) {
          if (cur.get(z - 1).getKey().equalsIgnoreCase(a)) {
            continue outer;
          }
        }
        cur.add(new SetupItem(a, b));
      }
    }

    if (algoName == null) {
      return null;
    }

    return new ExperimentSetup(algoName, initName, algo, init, sys, create);
  }

  /**
   * Load an experiment setup from a file
   *
   * @param file
   *          the file
   * @return the experiment setup, or {@code null} if no data was
   *         discovered
   * @throws IOException
   *           if io fails
   */
  private static final ExperimentSetup __load_setup(final File file)
      throws IOException {
    try {
      if ((file != null) && (file.exists()) && (file.isFile())) {
        try (final FileReader fr = new FileReader(file)) {
          try (final BufferedReader br = new BufferedReader(fr)) {
            return FileDataSource.__load_setup(br);
          }
        }
      }
    } catch (final IllegalArgumentException | NullPointerException
        | IllegalStateException error) {
      throw new IOException(
          ("Error encountered when loading experiment setup from file '"//$NON-NLS-1$
              + file + '\''), error);
    }
    return null;
  }

  /**
   * list the files in a directory
   *
   * @param f
   *          the file
   * @param list
   *          the list, if any
   * @return the list
   */
  private static final ArrayList<File> __list(final File f,
      final ArrayList<File> list) {
    final File[] fs;
    String name;
    ArrayList<File> lst;

    lst = null;
    if (f != null) {
      if (f.isDirectory() && f.exists()) {
        fs = f.listFiles();
        if (fs != null) {
          for (final File ff : fs) {
            if (ff == null) {
              continue;
            }
            if (ff.isDirectory() && ff.exists()) {

              name = TextUtils.prepare(ff.getName());
              if (name == null) {
                continue;
              }
              if (name.equalsIgnoreCase("result") || //$NON-NLS-1$
                  name.equalsIgnoreCase("results") || //$NON-NLS-1$
                  name.equalsIgnoreCase("symmetric") || //$NON-NLS-1$
                  name.equalsIgnoreCase("asymmetric")) { //$NON-NLS-1$
                lst = FileDataSource.__list(ff, lst);
              } else {

                if (lst == null) {
                  lst = list;
                  if (lst == null) {
                    lst = new ArrayList<>();
                  }
                }

                lst.add(ff);
              }
            }
          }
        }
      }
    }

    return lst;
  }

  /**
   * we try to find folders which may contain experiments
   *
   * @param searchPath
   *          the search path
   * @param output
   *          the list where the experiments are contained
   * @param tempDataPoints
   *          the temporary list for data points
   * @param tempRuns
   *          the temporary list for runs
   * @param tempRunSets
   *          the temporary list for run sets
   * @return {@code true} if an experiment was discovered, {@code false}
   *         otherwise
   * @throws IOException
   *           if io fails
   */
  private final boolean __load_experiments(final File searchPath,
      final List<Experiment> output, final List<RunSet> tempRunSets,
      final List<Run> tempRuns, final List<DataPoint> tempDataPoints)
      throws IOException {
    final int size;
    final File base;
    final Logger log;
    final Experiment exp;
    ArrayList<File> list;
    File f, file;
    boolean ret;
    RunSet rs;
    Instance inst;
    String name;
    int mode;

    base = FileUtils.canonicalize(searchPath);
    if (base == null) {
      return false;
    }

    if (!(base.isDirectory() && base.exists())) {
      return false;
    }

    list = FileDataSource.__list(base, null);
    if ((list == null) || (list.isEmpty())) {
      return false;
    }

    log = this.getLogger();
    if ((log != null) && (log.isLoggable(Level.FINE))) {
      log.fine("Experiment loader now tracing into folder '" + base + '\''); //$NON-NLS-1$
    }

    try {
      tempRunSets.clear();
      tempRuns.clear();
      tempDataPoints.clear();
      mode = 0;
      ret = false;

      try {
        while (!(list.isEmpty())) {
          file = list.remove(0);

          if (mode >= 0) {
            name = TextUtils.prepare(file.getName());
            if (name != null) {
              inst = Instance.forName(name);
              if (inst != null) {
                rs = this.__load_run_set(inst, file, tempRuns,
                    tempDataPoints);
                if (rs != null) {
                  mode = 1;
                  tempRunSets.add(rs);
                }
              }
            }
          }

          if (mode <= 0) {
            if (this.__load_experiments(file, output, tempRunSets,
                tempRuns, tempDataPoints)) {
              mode = (-1);
              ret = true;
            }
          }

        }

        if (mode > 0) {
          size = tempRunSets.size();
          if (size > 0) {

            f = base;
            do {
              name = f.getName().toLowerCase();
              if ("result".equals(name) || //$NON-NLS-1$
                  "results".equals(name) || //$NON-NLS-1$
                  "symmetric".equals(name) || //$NON-NLS-1$
                  "asymmetric".equals(name)) { //$NON-NLS-1$
                f = f.getParentFile();
                continue;
              }
              break;
            } while (f != null);

            try {
              exp = new Experiment(name, this.__find_setup(base),//
                  tempRunSets.toArray(new RunSet[size]));
            } catch (final IllegalArgumentException | NullPointerException error) {
              throw new IOException(
                  ("Error encountered when creating Experiment with data loaded from folder '"//$NON-NLS-1$
                      + base + '\''), error);
            }

            if ((log != null) && (log.isLoggable(Level.INFO))) {
              log.info("Found experiment '" + exp.name() + //$NON-NLS-1$
                  "' with " + exp.size() + //$NON-NLS-1$
                  " run sets in folder '" + base + '\''); //$NON-NLS-1$
            }

            output.add(exp);
            ret = true;
          }
        }
      } finally {
        tempRunSets.clear();
        tempRuns.clear();
        tempDataPoints.clear();
      }
    } finally {
      if ((log != null) && (log.isLoggable(Level.FINE))) {
        log.fine("Experiment loader now leaving folder '" + base + '\''); //$NON-NLS-1$
      }
    }
    return ret;
  }

  /**
   * load the data of this class from a number reader
   *
   * @param br
   *          the number reader
   * @return a new log point, or {@code null} if the end of the stream was
   *         reached
   * @throws IOException
   *           if io fails
   */
  private static final DataPoint __load_point(final BufferedReader br)
      throws IOException {
    String s, t;
    int i, l, start, end;

    long fe, de, time, f;
    double relF, normTime;
    boolean reasonFE, reasonDE, reasonF, reasonInitEnd, reasonAlgoEnd;

    for (;;) {
      s = br.readLine();
      if (s == null) {
        return null;
      }

      s = FileDataSource.__prepare(s);
      if (s == null) {
        continue;
      }

      if (ObjectiveFunction.SECTION_END.equalsIgnoreCase(s)) {
        return null;
      }

      l = s.length();
      // load the FE
      start = 0;
      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        fe = Long.parseLong(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid FE index format: " + t, tt); //$NON-NLS-1$
      }

      // load the DE
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }

      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        de = Long.parseLong(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid DE index format: " + t, tt); //$NON-NLS-1$
      }

      // load the runtime
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }

      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        time = Long.parseLong(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid runtime format: " + t, tt); //$NON-NLS-1$
      }

      // load the normalized runtime
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }

      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        normTime = Double.parseDouble(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid normalized runtime format: " + t, tt); //$NON-NLS-1$
      }

      // load objective value
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }

      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        f = Long.parseLong(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid objective value format: " + t, tt); //$NON-NLS-1$
      }

      // load relative objective value
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }

      end = -1;
      for (i = start; i < l; i++) {
        if (s.charAt(i) <= ' ') {
          end = i;
          break;
        }
      }

      if (end <= start) {
        return null;
      }

      t = s.substring(start, end);
      try {
        relF = Double.parseDouble(t);
      } catch (final Throwable tt) {
        throw new IllegalArgumentException(
            "Invalid relative objective value format: " + t, tt); //$NON-NLS-1$
      }

      // load log reason flags
      start = -1;
      for (i = end; i < l; i++) {
        if (s.charAt(i) > ' ') {
          start = i;
          break;
        }
      }
      if (start <= end) {
        return null;
      }
      t = s.substring(start, l);

      reasonFE = reasonDE = reasonF = reasonInitEnd = reasonAlgoEnd = false;

      if (t.indexOf(ObjectiveFunction.TYPE_FLAG_DE_CHAR) >= 0) {
        reasonDE = true;
      }

      if (t.indexOf(ObjectiveFunction.TYPE_FLAG_FE_CHAR) >= 0) {
        reasonFE = true;
      }

      if (t.indexOf(ObjectiveFunction.TYPE_FLAG_OBJECTIVE_CHAR) >= 0) {
        reasonF = true;
      }

      if (t.indexOf(ObjectiveFunction.TYPE_FLAG_END_CHAR) >= 0) {
        reasonAlgoEnd = true;
      }

      if (t.indexOf(ObjectiveFunction.TYPE_FLAG_INIT_END_CHAR) >= 0) {
        reasonInitEnd = true;
      }

      return new DataPoint(fe, de, time, f, relF, normTime, reasonFE,
          reasonDE, reasonF, reasonInitEnd, reasonAlgoEnd);
    }
  }

  /**
   * prepare a string
   *
   * @param str
   *          the string
   * @return the prepared string
   */
  private static final String __prepare(final String str) {
    String s;
    int i;

    s = TextUtils.prepare(str);
    if (s == null) {
      return null;
    }

    while ((i = s.indexOf(ObjectiveFunction.COMMENT_START)) >= 0) {
      s = TextUtils.prepare(s.substring(0, i));
      if (s == null) {
        return null;
      }
    }
    return s;
  }

}
